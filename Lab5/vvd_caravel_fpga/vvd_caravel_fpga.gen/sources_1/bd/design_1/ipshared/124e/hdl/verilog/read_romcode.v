// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="read_romcode_read_romcode,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=1035,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1266,HLS_SYN_LUT=1284,HLS_VERSION=2023_1}" *)

module read_romcode (
        ap_clk,
        ap_rst_n,
        m_axi_BUS0_AWVALID,
        m_axi_BUS0_AWREADY,
        m_axi_BUS0_AWADDR,
        m_axi_BUS0_AWID,
        m_axi_BUS0_AWLEN,
        m_axi_BUS0_AWSIZE,
        m_axi_BUS0_AWBURST,
        m_axi_BUS0_AWLOCK,
        m_axi_BUS0_AWCACHE,
        m_axi_BUS0_AWPROT,
        m_axi_BUS0_AWQOS,
        m_axi_BUS0_AWREGION,
        m_axi_BUS0_AWUSER,
        m_axi_BUS0_WVALID,
        m_axi_BUS0_WREADY,
        m_axi_BUS0_WDATA,
        m_axi_BUS0_WSTRB,
        m_axi_BUS0_WLAST,
        m_axi_BUS0_WID,
        m_axi_BUS0_WUSER,
        m_axi_BUS0_ARVALID,
        m_axi_BUS0_ARREADY,
        m_axi_BUS0_ARADDR,
        m_axi_BUS0_ARID,
        m_axi_BUS0_ARLEN,
        m_axi_BUS0_ARSIZE,
        m_axi_BUS0_ARBURST,
        m_axi_BUS0_ARLOCK,
        m_axi_BUS0_ARCACHE,
        m_axi_BUS0_ARPROT,
        m_axi_BUS0_ARQOS,
        m_axi_BUS0_ARREGION,
        m_axi_BUS0_ARUSER,
        m_axi_BUS0_RVALID,
        m_axi_BUS0_RREADY,
        m_axi_BUS0_RDATA,
        m_axi_BUS0_RLAST,
        m_axi_BUS0_RID,
        m_axi_BUS0_RUSER,
        m_axi_BUS0_RRESP,
        m_axi_BUS0_BVALID,
        m_axi_BUS0_BREADY,
        m_axi_BUS0_BRESP,
        m_axi_BUS0_BID,
        m_axi_BUS0_BUSER,
        internal_bram_Addr_A,
        internal_bram_EN_A,
        internal_bram_WEN_A,
        internal_bram_Din_A,
        internal_bram_Dout_A,
        internal_bram_Clk_A,
        internal_bram_Rst_A,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state13 = 3'd4;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_BUS0_ID_WIDTH = 1;
parameter    C_M_AXI_BUS0_ADDR_WIDTH = 64;
parameter    C_M_AXI_BUS0_DATA_WIDTH = 32;
parameter    C_M_AXI_BUS0_AWUSER_WIDTH = 1;
parameter    C_M_AXI_BUS0_ARUSER_WIDTH = 1;
parameter    C_M_AXI_BUS0_WUSER_WIDTH = 1;
parameter    C_M_AXI_BUS0_RUSER_WIDTH = 1;
parameter    C_M_AXI_BUS0_BUSER_WIDTH = 1;
parameter    C_M_AXI_BUS0_USER_VALUE = 0;
parameter    C_M_AXI_BUS0_PROT_VALUE = 0;
parameter    C_M_AXI_BUS0_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_BUS0_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_BUS0_AWVALID;
input   m_axi_BUS0_AWREADY;
output  [C_M_AXI_BUS0_ADDR_WIDTH - 1:0] m_axi_BUS0_AWADDR;
output  [C_M_AXI_BUS0_ID_WIDTH - 1:0] m_axi_BUS0_AWID;
output  [7:0] m_axi_BUS0_AWLEN;
output  [2:0] m_axi_BUS0_AWSIZE;
output  [1:0] m_axi_BUS0_AWBURST;
output  [1:0] m_axi_BUS0_AWLOCK;
output  [3:0] m_axi_BUS0_AWCACHE;
output  [2:0] m_axi_BUS0_AWPROT;
output  [3:0] m_axi_BUS0_AWQOS;
output  [3:0] m_axi_BUS0_AWREGION;
output  [C_M_AXI_BUS0_AWUSER_WIDTH - 1:0] m_axi_BUS0_AWUSER;
output   m_axi_BUS0_WVALID;
input   m_axi_BUS0_WREADY;
output  [C_M_AXI_BUS0_DATA_WIDTH - 1:0] m_axi_BUS0_WDATA;
output  [C_M_AXI_BUS0_WSTRB_WIDTH - 1:0] m_axi_BUS0_WSTRB;
output   m_axi_BUS0_WLAST;
output  [C_M_AXI_BUS0_ID_WIDTH - 1:0] m_axi_BUS0_WID;
output  [C_M_AXI_BUS0_WUSER_WIDTH - 1:0] m_axi_BUS0_WUSER;
output   m_axi_BUS0_ARVALID;
input   m_axi_BUS0_ARREADY;
output  [C_M_AXI_BUS0_ADDR_WIDTH - 1:0] m_axi_BUS0_ARADDR;
output  [C_M_AXI_BUS0_ID_WIDTH - 1:0] m_axi_BUS0_ARID;
output  [7:0] m_axi_BUS0_ARLEN;
output  [2:0] m_axi_BUS0_ARSIZE;
output  [1:0] m_axi_BUS0_ARBURST;
output  [1:0] m_axi_BUS0_ARLOCK;
output  [3:0] m_axi_BUS0_ARCACHE;
output  [2:0] m_axi_BUS0_ARPROT;
output  [3:0] m_axi_BUS0_ARQOS;
output  [3:0] m_axi_BUS0_ARREGION;
output  [C_M_AXI_BUS0_ARUSER_WIDTH - 1:0] m_axi_BUS0_ARUSER;
input   m_axi_BUS0_RVALID;
output   m_axi_BUS0_RREADY;
input  [C_M_AXI_BUS0_DATA_WIDTH - 1:0] m_axi_BUS0_RDATA;
input   m_axi_BUS0_RLAST;
input  [C_M_AXI_BUS0_ID_WIDTH - 1:0] m_axi_BUS0_RID;
input  [C_M_AXI_BUS0_RUSER_WIDTH - 1:0] m_axi_BUS0_RUSER;
input  [1:0] m_axi_BUS0_RRESP;
input   m_axi_BUS0_BVALID;
output   m_axi_BUS0_BREADY;
input  [1:0] m_axi_BUS0_BRESP;
input  [C_M_AXI_BUS0_ID_WIDTH - 1:0] m_axi_BUS0_BID;
input  [C_M_AXI_BUS0_BUSER_WIDTH - 1:0] m_axi_BUS0_BUSER;
output  [31:0] internal_bram_Addr_A;
output   internal_bram_EN_A;
output  [3:0] internal_bram_WEN_A;
output  [31:0] internal_bram_Din_A;
input  [31:0] internal_bram_Dout_A;
output   internal_bram_Clk_A;
output   internal_bram_Rst_A;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg internal_bram_EN_A;
reg[3:0] internal_bram_WEN_A;
reg internal_bram_Rst_A;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] romcode;
wire   [31:0] length_r;
reg    BUS0_blk_n_AR;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] first_iter_0_reg_140;
reg    BUS0_blk_n_R;
reg    ap_enable_reg_pp0_iter9;
reg   [0:0] icmp_ln31_2_reg_313;
reg   [0:0] icmp_ln31_2_reg_313_pp0_iter8_reg;
wire    ap_block_state2_pp0_stage0_iter0;
wire    BUS0_AWREADY;
wire    BUS0_WREADY;
reg    BUS0_ARVALID;
wire    BUS0_ARREADY;
wire    BUS0_RVALID;
reg    BUS0_RREADY;
wire   [31:0] BUS0_RDATA;
wire   [10:0] BUS0_RFIFONUM;
wire    BUS0_BVALID;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
reg    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] BUS0_addr_reg_292;
wire   [31:0] zext_ln31_fu_229_p1;
reg   [31:0] zext_ln31_reg_298;
wire   [11:0] select_ln31_1_fu_249_p3;
reg   [11:0] select_ln31_1_reg_303;
reg   [11:0] i_1_reg_308;
reg   [11:0] i_1_reg_308_pp0_iter1_reg;
reg   [11:0] i_1_reg_308_pp0_iter2_reg;
reg   [11:0] i_1_reg_308_pp0_iter3_reg;
reg   [11:0] i_1_reg_308_pp0_iter4_reg;
reg   [11:0] i_1_reg_308_pp0_iter5_reg;
reg   [11:0] i_1_reg_308_pp0_iter6_reg;
reg   [11:0] i_1_reg_308_pp0_iter7_reg;
reg   [11:0] i_1_reg_308_pp0_iter8_reg;
reg   [11:0] i_1_reg_308_pp0_iter9_reg;
wire   [0:0] icmp_ln31_2_fu_265_p2;
reg   [0:0] icmp_ln31_2_reg_313_pp0_iter1_reg;
reg   [0:0] icmp_ln31_2_reg_313_pp0_iter2_reg;
reg   [0:0] icmp_ln31_2_reg_313_pp0_iter3_reg;
reg   [0:0] icmp_ln31_2_reg_313_pp0_iter4_reg;
reg   [0:0] icmp_ln31_2_reg_313_pp0_iter5_reg;
reg   [0:0] icmp_ln31_2_reg_313_pp0_iter6_reg;
reg   [0:0] icmp_ln31_2_reg_313_pp0_iter7_reg;
reg   [0:0] icmp_ln31_2_reg_313_pp0_iter9_reg;
reg   [31:0] BUS0_addr_read_reg_317;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter10;
wire   [63:0] zext_ln31_1_fu_281_p1;
wire  signed [63:0] sext_ln31_fu_203_p1;
reg   [11:0] i_fu_100;
wire   [11:0] add_ln31_fu_270_p2;
wire   [31:0] internal_bram_Addr_A_orig;
wire   [0:0] icmp_ln26_fu_157_p2;
wire   [11:0] trunc_ln13_fu_153_p1;
wire   [11:0] select_ln26_fu_163_p3;
wire   [10:0] tmp_fu_177_p4;
wire   [61:0] trunc_ln1_fu_193_p4;
wire   [0:0] icmp_ln31_1_fu_187_p2;
wire   [0:0] icmp_ln31_fu_171_p2;
wire   [11:0] select_ln31_fu_213_p3;
wire   [11:0] empty_fu_221_p3;
wire   [20:0] tmp_1_fu_233_p4;
wire   [0:0] icmp5_fu_243_p2;
wire    ap_CS_fsm_state13;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
end

read_romcode_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .romcode(romcode),
    .length_r(length_r),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

read_romcode_BUS0_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .MAX_READ_BURST_LENGTH( 64 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_BUS0_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_BUS0_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_BUS0_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_BUS0_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_BUS0_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_BUS0_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_BUS0_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_BUS0_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_BUS0_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_BUS0_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_BUS0_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 11 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
BUS0_m_axi_U(
    .AWVALID(m_axi_BUS0_AWVALID),
    .AWREADY(m_axi_BUS0_AWREADY),
    .AWADDR(m_axi_BUS0_AWADDR),
    .AWID(m_axi_BUS0_AWID),
    .AWLEN(m_axi_BUS0_AWLEN),
    .AWSIZE(m_axi_BUS0_AWSIZE),
    .AWBURST(m_axi_BUS0_AWBURST),
    .AWLOCK(m_axi_BUS0_AWLOCK),
    .AWCACHE(m_axi_BUS0_AWCACHE),
    .AWPROT(m_axi_BUS0_AWPROT),
    .AWQOS(m_axi_BUS0_AWQOS),
    .AWREGION(m_axi_BUS0_AWREGION),
    .AWUSER(m_axi_BUS0_AWUSER),
    .WVALID(m_axi_BUS0_WVALID),
    .WREADY(m_axi_BUS0_WREADY),
    .WDATA(m_axi_BUS0_WDATA),
    .WSTRB(m_axi_BUS0_WSTRB),
    .WLAST(m_axi_BUS0_WLAST),
    .WID(m_axi_BUS0_WID),
    .WUSER(m_axi_BUS0_WUSER),
    .ARVALID(m_axi_BUS0_ARVALID),
    .ARREADY(m_axi_BUS0_ARREADY),
    .ARADDR(m_axi_BUS0_ARADDR),
    .ARID(m_axi_BUS0_ARID),
    .ARLEN(m_axi_BUS0_ARLEN),
    .ARSIZE(m_axi_BUS0_ARSIZE),
    .ARBURST(m_axi_BUS0_ARBURST),
    .ARLOCK(m_axi_BUS0_ARLOCK),
    .ARCACHE(m_axi_BUS0_ARCACHE),
    .ARPROT(m_axi_BUS0_ARPROT),
    .ARQOS(m_axi_BUS0_ARQOS),
    .ARREGION(m_axi_BUS0_ARREGION),
    .ARUSER(m_axi_BUS0_ARUSER),
    .RVALID(m_axi_BUS0_RVALID),
    .RREADY(m_axi_BUS0_RREADY),
    .RDATA(m_axi_BUS0_RDATA),
    .RLAST(m_axi_BUS0_RLAST),
    .RID(m_axi_BUS0_RID),
    .RUSER(m_axi_BUS0_RUSER),
    .RRESP(m_axi_BUS0_RRESP),
    .BVALID(m_axi_BUS0_BVALID),
    .BREADY(m_axi_BUS0_BREADY),
    .BRESP(m_axi_BUS0_BRESP),
    .BID(m_axi_BUS0_BID),
    .BUSER(m_axi_BUS0_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(BUS0_ARVALID),
    .I_ARREADY(BUS0_ARREADY),
    .I_ARADDR(BUS0_addr_reg_292),
    .I_ARLEN(zext_ln31_reg_298),
    .I_RVALID(BUS0_RVALID),
    .I_RREADY(BUS0_RREADY),
    .I_RDATA(BUS0_RDATA),
    .I_RFIFONUM(BUS0_RFIFONUM),
    .I_AWVALID(1'b0),
    .I_AWREADY(BUS0_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWLEN(32'd0),
    .I_WVALID(1'b0),
    .I_WREADY(BUS0_WREADY),
    .I_WDATA(32'd0),
    .I_WSTRB(4'd0),
    .I_BVALID(BUS0_BVALID),
    .I_BREADY(1'b0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter10 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        first_iter_0_reg_140 <= 1'd1;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln31_2_reg_313 == 1'd0))) begin
        first_iter_0_reg_140 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_100 <= 12'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln31_2_fu_265_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_fu_100 <= add_ln31_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln31_2_reg_313_pp0_iter8_reg == 1'd0))) begin
        BUS0_addr_read_reg_317 <= BUS0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        BUS0_addr_reg_292 <= sext_ln31_fu_203_p1;
        select_ln31_1_reg_303 <= select_ln31_1_fu_249_p3;
        zext_ln31_reg_298[11 : 0] <= zext_ln31_fu_229_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_reg_308 <= i_fu_100;
        i_1_reg_308_pp0_iter1_reg <= i_1_reg_308;
        icmp_ln31_2_reg_313 <= icmp_ln31_2_fu_265_p2;
        icmp_ln31_2_reg_313_pp0_iter1_reg <= icmp_ln31_2_reg_313;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        i_1_reg_308_pp0_iter2_reg <= i_1_reg_308_pp0_iter1_reg;
        i_1_reg_308_pp0_iter3_reg <= i_1_reg_308_pp0_iter2_reg;
        i_1_reg_308_pp0_iter4_reg <= i_1_reg_308_pp0_iter3_reg;
        i_1_reg_308_pp0_iter5_reg <= i_1_reg_308_pp0_iter4_reg;
        i_1_reg_308_pp0_iter6_reg <= i_1_reg_308_pp0_iter5_reg;
        i_1_reg_308_pp0_iter7_reg <= i_1_reg_308_pp0_iter6_reg;
        i_1_reg_308_pp0_iter8_reg <= i_1_reg_308_pp0_iter7_reg;
        i_1_reg_308_pp0_iter9_reg <= i_1_reg_308_pp0_iter8_reg;
        icmp_ln31_2_reg_313_pp0_iter2_reg <= icmp_ln31_2_reg_313_pp0_iter1_reg;
        icmp_ln31_2_reg_313_pp0_iter3_reg <= icmp_ln31_2_reg_313_pp0_iter2_reg;
        icmp_ln31_2_reg_313_pp0_iter4_reg <= icmp_ln31_2_reg_313_pp0_iter3_reg;
        icmp_ln31_2_reg_313_pp0_iter5_reg <= icmp_ln31_2_reg_313_pp0_iter4_reg;
        icmp_ln31_2_reg_313_pp0_iter6_reg <= icmp_ln31_2_reg_313_pp0_iter5_reg;
        icmp_ln31_2_reg_313_pp0_iter7_reg <= icmp_ln31_2_reg_313_pp0_iter6_reg;
        icmp_ln31_2_reg_313_pp0_iter8_reg <= icmp_ln31_2_reg_313_pp0_iter7_reg;
        icmp_ln31_2_reg_313_pp0_iter9_reg <= icmp_ln31_2_reg_313_pp0_iter8_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (first_iter_0_reg_140 == 1'd1))) begin
        BUS0_ARVALID = 1'b1;
    end else begin
        BUS0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln31_2_reg_313_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        BUS0_RREADY = 1'b1;
    end else begin
        BUS0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (first_iter_0_reg_140 == 1'd1))) begin
        BUS0_blk_n_AR = m_axi_BUS0_ARREADY;
    end else begin
        BUS0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln31_2_reg_313_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        BUS0_blk_n_R = m_axi_BUS0_RVALID;
    end else begin
        BUS0_blk_n_R = 1'b1;
    end
end

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln31_2_fu_265_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        internal_bram_EN_A = 1'b1;
    end else begin
        internal_bram_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln31_2_reg_313_pp0_iter9_reg == 1'd0))) begin
        internal_bram_WEN_A = 4'd15;
    end else begin
        internal_bram_WEN_A = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln31_2_fu_265_p2 == 1'd1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter10 == 1'b1) & (ap_enable_reg_pp0_iter9 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter10 == 1'b1) & (ap_enable_reg_pp0_iter9 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln31_2_fu_265_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln31_fu_270_p2 = (i_fu_100 + 12'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((1'b0 == BUS0_RVALID) & (icmp_ln31_2_reg_313_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((1'b0 == BUS0_RVALID) & (icmp_ln31_2_reg_313_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter9 = ((1'b0 == BUS0_RVALID) & (icmp_ln31_2_reg_313_pp0_iter8_reg == 1'd0));
end

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((1'b0 == BUS0_ARREADY) & (first_iter_0_reg_140 == 1'd1));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_fu_221_p3 = ((icmp_ln31_fu_171_p2[0:0] == 1'b1) ? select_ln31_fu_213_p3 : 12'd0);

assign icmp5_fu_243_p2 = ((tmp_1_fu_233_p4 == 21'd0) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_157_p2 = ((length_r > 32'd2048) ? 1'b1 : 1'b0);

assign icmp_ln31_1_fu_187_p2 = ((tmp_fu_177_p4 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln31_2_fu_265_p2 = ((i_fu_100 == select_ln31_1_reg_303) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_171_p2 = ((select_ln26_fu_163_p3 != 12'd0) ? 1'b1 : 1'b0);

assign internal_bram_Addr_A = internal_bram_Addr_A_orig << 32'd2;

assign internal_bram_Addr_A_orig = zext_ln31_1_fu_281_p1;

assign internal_bram_Clk_A = ap_clk;

assign internal_bram_Din_A = BUS0_addr_read_reg_317;

always @ (*) begin
    internal_bram_Rst_A = ~ap_rst_n;
end

assign select_ln26_fu_163_p3 = ((icmp_ln26_fu_157_p2[0:0] == 1'b1) ? 12'd2048 : trunc_ln13_fu_153_p1);

assign select_ln31_1_fu_249_p3 = ((icmp5_fu_243_p2[0:0] == 1'b1) ? trunc_ln13_fu_153_p1 : 12'd2048);

assign select_ln31_fu_213_p3 = ((icmp_ln31_1_fu_187_p2[0:0] == 1'b1) ? select_ln26_fu_163_p3 : 12'd1);

assign sext_ln31_fu_203_p1 = $signed(trunc_ln1_fu_193_p4);

assign tmp_1_fu_233_p4 = {{length_r[31:11]}};

assign tmp_fu_177_p4 = {{select_ln26_fu_163_p3[11:1]}};

assign trunc_ln13_fu_153_p1 = length_r[11:0];

assign trunc_ln1_fu_193_p4 = {{romcode[63:2]}};

assign zext_ln31_1_fu_281_p1 = i_1_reg_308_pp0_iter9_reg;

assign zext_ln31_fu_229_p1 = empty_fu_221_p3;

always @ (posedge ap_clk) begin
    zext_ln31_reg_298[31:12] <= 20'b00000000000000000000;
end

endmodule //read_romcode
