-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity read_romcode is
generic (
    C_M_AXI_BUS0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_BUS0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_BUS0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BUS0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS0_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BUS0_USER_VALUE : INTEGER := 0;
    C_M_AXI_BUS0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_BUS0_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_BUS0_AWVALID : OUT STD_LOGIC;
    m_axi_BUS0_AWREADY : IN STD_LOGIC;
    m_axi_BUS0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS0_ADDR_WIDTH-1 downto 0);
    m_axi_BUS0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS0_ID_WIDTH-1 downto 0);
    m_axi_BUS0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_BUS0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BUS0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BUS0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BUS0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BUS0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BUS0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BUS0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BUS0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS0_AWUSER_WIDTH-1 downto 0);
    m_axi_BUS0_WVALID : OUT STD_LOGIC;
    m_axi_BUS0_WREADY : IN STD_LOGIC;
    m_axi_BUS0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS0_DATA_WIDTH-1 downto 0);
    m_axi_BUS0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS0_DATA_WIDTH/8-1 downto 0);
    m_axi_BUS0_WLAST : OUT STD_LOGIC;
    m_axi_BUS0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS0_ID_WIDTH-1 downto 0);
    m_axi_BUS0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS0_WUSER_WIDTH-1 downto 0);
    m_axi_BUS0_ARVALID : OUT STD_LOGIC;
    m_axi_BUS0_ARREADY : IN STD_LOGIC;
    m_axi_BUS0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS0_ADDR_WIDTH-1 downto 0);
    m_axi_BUS0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS0_ID_WIDTH-1 downto 0);
    m_axi_BUS0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_BUS0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BUS0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BUS0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BUS0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BUS0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BUS0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BUS0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BUS0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS0_ARUSER_WIDTH-1 downto 0);
    m_axi_BUS0_RVALID : IN STD_LOGIC;
    m_axi_BUS0_RREADY : OUT STD_LOGIC;
    m_axi_BUS0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_BUS0_DATA_WIDTH-1 downto 0);
    m_axi_BUS0_RLAST : IN STD_LOGIC;
    m_axi_BUS0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_BUS0_ID_WIDTH-1 downto 0);
    m_axi_BUS0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUS0_RUSER_WIDTH-1 downto 0);
    m_axi_BUS0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BUS0_BVALID : IN STD_LOGIC;
    m_axi_BUS0_BREADY : OUT STD_LOGIC;
    m_axi_BUS0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BUS0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_BUS0_ID_WIDTH-1 downto 0);
    m_axi_BUS0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUS0_BUSER_WIDTH-1 downto 0);
    internal_bram_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    internal_bram_EN_A : OUT STD_LOGIC;
    internal_bram_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    internal_bram_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    internal_bram_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    internal_bram_Clk_A : OUT STD_LOGIC;
    internal_bram_Rst_A : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of read_romcode is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "read_romcode_read_romcode,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=1035,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1266,HLS_SYN_LUT=1284,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_800 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal romcode : STD_LOGIC_VECTOR (63 downto 0);
    signal length_r : STD_LOGIC_VECTOR (31 downto 0);
    signal BUS0_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal first_iter_0_reg_140 : STD_LOGIC_VECTOR (0 downto 0);
    signal BUS0_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal icmp_ln31_2_reg_313 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_2_reg_313_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal BUS0_AWREADY : STD_LOGIC;
    signal BUS0_WREADY : STD_LOGIC;
    signal BUS0_ARVALID : STD_LOGIC;
    signal BUS0_ARREADY : STD_LOGIC;
    signal BUS0_RVALID : STD_LOGIC;
    signal BUS0_RREADY : STD_LOGIC;
    signal BUS0_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal BUS0_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal BUS0_BVALID : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal BUS0_addr_reg_292 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_fu_229_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln31_reg_298 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln31_1_fu_249_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln31_1_reg_303 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_reg_308 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_reg_308_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_reg_308_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_reg_308_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_reg_308_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_reg_308_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_reg_308_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_reg_308_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_reg_308_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_reg_308_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln31_2_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_2_reg_313_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_2_reg_313_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_2_reg_313_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_2_reg_313_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_2_reg_313_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_2_reg_313_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_2_reg_313_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_2_reg_313_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal BUS0_addr_read_reg_317 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal zext_ln31_1_fu_281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln31_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_100 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln31_fu_270_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal internal_bram_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln26_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln13_fu_153_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln26_fu_163_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_177_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1_fu_193_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln31_1_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln31_fu_213_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_fu_221_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_233_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp5_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component read_romcode_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        romcode : OUT STD_LOGIC_VECTOR (63 downto 0);
        length_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component read_romcode_BUS0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component read_romcode_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        romcode => romcode,
        length_r => length_r,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    BUS0_m_axi_U : component read_romcode_BUS0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 64,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_BUS0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_BUS0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_BUS0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_BUS0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_BUS0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_BUS0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_BUS0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_BUS0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_BUS0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_BUS0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_BUS0_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 11,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_BUS0_AWVALID,
        AWREADY => m_axi_BUS0_AWREADY,
        AWADDR => m_axi_BUS0_AWADDR,
        AWID => m_axi_BUS0_AWID,
        AWLEN => m_axi_BUS0_AWLEN,
        AWSIZE => m_axi_BUS0_AWSIZE,
        AWBURST => m_axi_BUS0_AWBURST,
        AWLOCK => m_axi_BUS0_AWLOCK,
        AWCACHE => m_axi_BUS0_AWCACHE,
        AWPROT => m_axi_BUS0_AWPROT,
        AWQOS => m_axi_BUS0_AWQOS,
        AWREGION => m_axi_BUS0_AWREGION,
        AWUSER => m_axi_BUS0_AWUSER,
        WVALID => m_axi_BUS0_WVALID,
        WREADY => m_axi_BUS0_WREADY,
        WDATA => m_axi_BUS0_WDATA,
        WSTRB => m_axi_BUS0_WSTRB,
        WLAST => m_axi_BUS0_WLAST,
        WID => m_axi_BUS0_WID,
        WUSER => m_axi_BUS0_WUSER,
        ARVALID => m_axi_BUS0_ARVALID,
        ARREADY => m_axi_BUS0_ARREADY,
        ARADDR => m_axi_BUS0_ARADDR,
        ARID => m_axi_BUS0_ARID,
        ARLEN => m_axi_BUS0_ARLEN,
        ARSIZE => m_axi_BUS0_ARSIZE,
        ARBURST => m_axi_BUS0_ARBURST,
        ARLOCK => m_axi_BUS0_ARLOCK,
        ARCACHE => m_axi_BUS0_ARCACHE,
        ARPROT => m_axi_BUS0_ARPROT,
        ARQOS => m_axi_BUS0_ARQOS,
        ARREGION => m_axi_BUS0_ARREGION,
        ARUSER => m_axi_BUS0_ARUSER,
        RVALID => m_axi_BUS0_RVALID,
        RREADY => m_axi_BUS0_RREADY,
        RDATA => m_axi_BUS0_RDATA,
        RLAST => m_axi_BUS0_RLAST,
        RID => m_axi_BUS0_RID,
        RUSER => m_axi_BUS0_RUSER,
        RRESP => m_axi_BUS0_RRESP,
        BVALID => m_axi_BUS0_BVALID,
        BREADY => m_axi_BUS0_BREADY,
        BRESP => m_axi_BUS0_BRESP,
        BID => m_axi_BUS0_BID,
        BUSER => m_axi_BUS0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => BUS0_ARVALID,
        I_ARREADY => BUS0_ARREADY,
        I_ARADDR => BUS0_addr_reg_292,
        I_ARLEN => zext_ln31_reg_298,
        I_RVALID => BUS0_RVALID,
        I_RREADY => BUS0_RREADY,
        I_RDATA => BUS0_RDATA,
        I_RFIFONUM => BUS0_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => BUS0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => BUS0_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => BUS0_BVALID,
        I_BREADY => ap_const_logic_0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    first_iter_0_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                first_iter_0_reg_140 <= ap_const_lv1_1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln31_2_reg_313 = ap_const_lv1_0))) then 
                first_iter_0_reg_140 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    i_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_100 <= ap_const_lv12_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln31_2_fu_265_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_100 <= add_ln31_fu_270_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln31_2_reg_313_pp0_iter8_reg = ap_const_lv1_0))) then
                BUS0_addr_read_reg_317 <= BUS0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                BUS0_addr_reg_292 <= sext_ln31_fu_203_p1;
                select_ln31_1_reg_303 <= select_ln31_1_fu_249_p3;
                    zext_ln31_reg_298(11 downto 0) <= zext_ln31_fu_229_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_1_reg_308 <= i_fu_100;
                i_1_reg_308_pp0_iter1_reg <= i_1_reg_308;
                icmp_ln31_2_reg_313 <= icmp_ln31_2_fu_265_p2;
                icmp_ln31_2_reg_313_pp0_iter1_reg <= icmp_ln31_2_reg_313;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                i_1_reg_308_pp0_iter2_reg <= i_1_reg_308_pp0_iter1_reg;
                i_1_reg_308_pp0_iter3_reg <= i_1_reg_308_pp0_iter2_reg;
                i_1_reg_308_pp0_iter4_reg <= i_1_reg_308_pp0_iter3_reg;
                i_1_reg_308_pp0_iter5_reg <= i_1_reg_308_pp0_iter4_reg;
                i_1_reg_308_pp0_iter6_reg <= i_1_reg_308_pp0_iter5_reg;
                i_1_reg_308_pp0_iter7_reg <= i_1_reg_308_pp0_iter6_reg;
                i_1_reg_308_pp0_iter8_reg <= i_1_reg_308_pp0_iter7_reg;
                i_1_reg_308_pp0_iter9_reg <= i_1_reg_308_pp0_iter8_reg;
                icmp_ln31_2_reg_313_pp0_iter2_reg <= icmp_ln31_2_reg_313_pp0_iter1_reg;
                icmp_ln31_2_reg_313_pp0_iter3_reg <= icmp_ln31_2_reg_313_pp0_iter2_reg;
                icmp_ln31_2_reg_313_pp0_iter4_reg <= icmp_ln31_2_reg_313_pp0_iter3_reg;
                icmp_ln31_2_reg_313_pp0_iter5_reg <= icmp_ln31_2_reg_313_pp0_iter4_reg;
                icmp_ln31_2_reg_313_pp0_iter6_reg <= icmp_ln31_2_reg_313_pp0_iter5_reg;
                icmp_ln31_2_reg_313_pp0_iter7_reg <= icmp_ln31_2_reg_313_pp0_iter6_reg;
                icmp_ln31_2_reg_313_pp0_iter8_reg <= icmp_ln31_2_reg_313_pp0_iter7_reg;
                icmp_ln31_2_reg_313_pp0_iter9_reg <= icmp_ln31_2_reg_313_pp0_iter8_reg;
            end if;
        end if;
    end process;
    zext_ln31_reg_298(31 downto 12) <= "00000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, icmp_ln31_2_fu_265_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln31_2_fu_265_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln31_2_fu_265_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    BUS0_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, first_iter_0_reg_140, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (first_iter_0_reg_140 = ap_const_lv1_1))) then 
            BUS0_ARVALID <= ap_const_logic_1;
        else 
            BUS0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    BUS0_RREADY_assign_proc : process(ap_enable_reg_pp0_iter9, icmp_ln31_2_reg_313_pp0_iter8_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln31_2_reg_313_pp0_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            BUS0_RREADY <= ap_const_logic_1;
        else 
            BUS0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    BUS0_blk_n_AR_assign_proc : process(m_axi_BUS0_ARREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, first_iter_0_reg_140)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (first_iter_0_reg_140 = ap_const_lv1_1))) then 
            BUS0_blk_n_AR <= m_axi_BUS0_ARREADY;
        else 
            BUS0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    BUS0_blk_n_R_assign_proc : process(m_axi_BUS0_RVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, icmp_ln31_2_reg_313_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln31_2_reg_313_pp0_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            BUS0_blk_n_R <= m_axi_BUS0_RVALID;
        else 
            BUS0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    add_ln31_fu_270_p2 <= std_logic_vector(unsigned(i_fu_100) + unsigned(ap_const_lv12_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(2);
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, icmp_ln31_2_reg_313_pp0_iter8_reg, BUS0_RVALID, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((ap_const_logic_0 = BUS0_RVALID) and (icmp_ln31_2_reg_313_pp0_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, icmp_ln31_2_reg_313_pp0_iter8_reg, BUS0_RVALID, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((ap_const_logic_0 = BUS0_RVALID) and (icmp_ln31_2_reg_313_pp0_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter9_assign_proc : process(icmp_ln31_2_reg_313_pp0_iter8_reg, BUS0_RVALID)
    begin
                ap_block_state11_pp0_stage0_iter9 <= ((ap_const_logic_0 = BUS0_RVALID) and (icmp_ln31_2_reg_313_pp0_iter8_reg = ap_const_lv1_0));
    end process;

        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(first_iter_0_reg_140, BUS0_ARREADY)
    begin
                ap_block_state3_io <= ((ap_const_logic_0 = BUS0_ARREADY) and (first_iter_0_reg_140 = ap_const_lv1_1));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln31_2_fu_265_p2)
    begin
        if ((icmp_ln31_2_fu_265_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    empty_fu_221_p3 <= 
        select_ln31_fu_213_p3 when (icmp_ln31_fu_171_p2(0) = '1') else 
        ap_const_lv12_0;
    icmp5_fu_243_p2 <= "1" when (tmp_1_fu_233_p4 = ap_const_lv21_0) else "0";
    icmp_ln26_fu_157_p2 <= "1" when (unsigned(length_r) > unsigned(ap_const_lv32_800)) else "0";
    icmp_ln31_1_fu_187_p2 <= "0" when (tmp_fu_177_p4 = ap_const_lv11_0) else "1";
    icmp_ln31_2_fu_265_p2 <= "1" when (i_fu_100 = select_ln31_1_reg_303) else "0";
    icmp_ln31_fu_171_p2 <= "0" when (select_ln26_fu_163_p3 = ap_const_lv12_0) else "1";
    internal_bram_Addr_A <= std_logic_vector(shift_left(unsigned(internal_bram_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    internal_bram_Addr_A_orig <= zext_ln31_1_fu_281_p1(32 - 1 downto 0);
    internal_bram_Clk_A <= ap_clk;
    internal_bram_Din_A <= BUS0_addr_read_reg_317;

    internal_bram_EN_A_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            internal_bram_EN_A <= ap_const_logic_1;
        else 
            internal_bram_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    internal_bram_Rst_A_assign_proc : process(ap_rst_n)
    begin
                internal_bram_Rst_A <= not(ap_rst_n);
    end process;


    internal_bram_WEN_A_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln31_2_reg_313_pp0_iter9_reg, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln31_2_reg_313_pp0_iter9_reg = ap_const_lv1_0))) then 
            internal_bram_WEN_A <= ap_const_lv4_F;
        else 
            internal_bram_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    select_ln26_fu_163_p3 <= 
        ap_const_lv12_800 when (icmp_ln26_fu_157_p2(0) = '1') else 
        trunc_ln13_fu_153_p1;
    select_ln31_1_fu_249_p3 <= 
        trunc_ln13_fu_153_p1 when (icmp5_fu_243_p2(0) = '1') else 
        ap_const_lv12_800;
    select_ln31_fu_213_p3 <= 
        select_ln26_fu_163_p3 when (icmp_ln31_1_fu_187_p2(0) = '1') else 
        ap_const_lv12_1;
        sext_ln31_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_193_p4),64));

    tmp_1_fu_233_p4 <= length_r(31 downto 11);
    tmp_fu_177_p4 <= select_ln26_fu_163_p3(11 downto 1);
    trunc_ln13_fu_153_p1 <= length_r(12 - 1 downto 0);
    trunc_ln1_fu_193_p4 <= romcode(63 downto 2);
    zext_ln31_1_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_308_pp0_iter9_reg),64));
    zext_ln31_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_221_p3),32));
end behav;
